// <auto-generated />
using System;
using MAFBurger.WebApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MAFBurger.WebApp.Migrations
{
    [DbContext(typeof(MAFBurgerDbContext))]
    [Migration("20241121095751_SauceTableSeedData")]
    partial class SauceTableSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "329d3be5-8001-4997-85a9-ebc16be771c2",
                            CreatedDate = new DateTime(2024, 11, 21, 12, 57, 50, 518, DateTimeKind.Local).AddTicks(8749),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c9bbce7e-7372-47f2-80e9-029ce117f245",
                            CreatedDate = new DateTime(2024, 11, 21, 12, 57, 50, 518, DateTimeKind.Local).AddTicks(8779),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "252d1809-cd07-4ebd-87d1-83cefac3b78c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55c5fc1a-1d71-4de4-b65e-e14eed798ade",
                            CreatedDate = new DateTime(2024, 11, 21, 12, 57, 50, 519, DateTimeKind.Local).AddTicks(1144),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK3AujPoL8vL+RPW5A20lJfbTx5nUsBEhI/Bt8U5/UlPV2wvCvtKTCBPCsJ7eJOinA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87b82a5e-69c1-4831-87d0-678b208084ae",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            UserType = 0
                        },
                        new
                        {
                            Id = "777d1907-cd07-4ebd-87f1-83fecac3b78c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60c5fc1a-1d71-4de4-b65e-e14eed798ade",
                            CreatedDate = new DateTime(2024, 11, 21, 12, 57, 50, 592, DateTimeKind.Local).AddTicks(6769),
                            Email = "customer@gmail.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHRvMU2PPQXWAdWA0AwO/TVDGYztdKH8kG8Xi8XcvpQXAO947EZnmUxNrv1FPo+rnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50b82a5e-69c1-4831-87d0-678b208084ae",
                            TwoFactorEnabled = false,
                            UserName = "customer@gmail.com",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Extras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 45, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Extra Patates Kızartması (küçük boy)",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 46, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Extra Patates Kızartması (orta boy)",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 47, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Extra Patates Kızartması (baya büyük boy)",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 47, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Extra Köfte",
                            Price = 90.00m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 49, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Extra Soğan Halkası (8'li)",
                            Price = 60.00m
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 49, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Extra Chicken Stick (8'li)",
                            Price = 85.00m
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 52, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sarımsaklı Mayonez + Ballı Hardal",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 53, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Acı Sos + Sarımsaklı Mayonez ",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 54, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Apple Pie",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 54, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sufle + Dondurma",
                            Price = 85.00m
                        });
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Beverages")
                        .HasColumnType("int");

                    b.Property<int?>("BurgerExtras")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SaucesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SaucesId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 6, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            Description = "Bildiğimiz normal hamburger. Köfte + Marul + Turşu + Soğan + Ketçap/Mayonez",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Normal Hamburger",
                            Price = 290.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 23, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            Description = "Bildiğimiz normal cheeseburger. Köfte + Cheddar + Marul + Turşu + Soğan + Ketçap/ Mayonez",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Cheese Burger",
                            Price = 310.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 23, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            Description = "Bildiğimiz normal mushroomburger. İçinde harika sotelenmiş kuzukulağı mantarları var. Köfte + Kuzukulağı Mantarı + Marul + Turşu + Soğan + Ketçap/Mayonez",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Mushroom Burger",
                            Price = 340.00m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 29, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            Description = "Bildiğimiz normal hamburgerin içinde karamelize soğan var. Köfte + Karamelize Soğan + Marul + Turşu + Soğan + Ketçap/Mayonez",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Karamelize Soğan Burger",
                            Price = 340.00m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 29, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            Description = "Bu çok güzel bi lezzet. Anlatılmaz, deneyin.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sloppy Joe",
                            Price = 355.00m
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 11, 18, 11, 32, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            Description = "Çıtıra yakın bir hamburger köftesi + özel sos + biraz sevgi.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SmashBurger",
                            Price = 335.00m
                        });
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.OrderExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersExtras");
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.OrderMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersMenus");
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sauces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 11, 21, 12, 45, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Acı Sos",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 11, 21, 12, 47, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sarımsaklı Mayonez",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 11, 21, 12, 50, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ballı Hardal",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 11, 21, 12, 51, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ranch Sos",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 11, 21, 12, 53, 51, 585, DateTimeKind.Local).AddTicks(9444),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Barbekü Sos",
                            Price = 10.00m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "252d1809-cd07-4ebd-87d1-83cefac3b78c",
                            RoleId = "329d3be5-8001-4997-85a9-ebc16be771c2"
                        },
                        new
                        {
                            UserId = "777d1907-cd07-4ebd-87f1-83fecac3b78c",
                            RoleId = "c9bbce7e-7372-47f2-80e9-029ce117f245"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.Menu", b =>
                {
                    b.HasOne("MAFBurger.WebApp.Data.Concrete.Sauce", "Sauces")
                        .WithMany()
                        .HasForeignKey("SaucesId");

                    b.Navigation("Sauces");
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.Order", b =>
                {
                    b.HasOne("MAFBurger.WebApp.Data.Concrete.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.OrderExtra", b =>
                {
                    b.HasOne("MAFBurger.WebApp.Data.Concrete.Extra", "Extra")
                        .WithMany("OrderExtras")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAFBurger.WebApp.Data.Concrete.Order", "Order")
                        .WithMany("OrderExtras")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Extra");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.OrderMenu", b =>
                {
                    b.HasOne("MAFBurger.WebApp.Data.Concrete.Menu", "Menu")
                        .WithMany("OrderMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAFBurger.WebApp.Data.Concrete.Order", "Order")
                        .WithMany("OrderMenus")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MAFBurger.WebApp.Data.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MAFBurger.WebApp.Data.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAFBurger.WebApp.Data.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MAFBurger.WebApp.Data.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.AppUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.Extra", b =>
                {
                    b.Navigation("OrderExtras");
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.Menu", b =>
                {
                    b.Navigation("OrderMenus");
                });

            modelBuilder.Entity("MAFBurger.WebApp.Data.Concrete.Order", b =>
                {
                    b.Navigation("OrderExtras");

                    b.Navigation("OrderMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
